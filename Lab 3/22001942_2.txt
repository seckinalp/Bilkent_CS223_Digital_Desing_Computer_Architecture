module func
(
  input logic A, B, C, D,
  output logic Y
);
  logic out1,out2,out3,out4,enable;
  decode24 decoder 
  (
    .in1(A),
    .in2(B),
    .out1(out3),
    .out2(out1),
    .out3(out4),
    .out4(out2),
    .enable(enable)
  );
  assign enable = 1;
  logic in1,in2,in3,in4,in5,in6,in7,in8;
  assign in1 = out1;
  assign in2 = out2;
  assign in3 = 1'b1;
  assign in4 = 1'b0;
  assign in5 = 1'b1;
  assign in6 = out4;
  assign in7 = out3;
  assign in8 = out4;
  mux81 mux 
  (
    .in1(in1),
    .in2(in2),
    .in3(in3),
    .in4(in4),
    .in5(in5),
    .in6(in6),
    .in7(in7),
    .in8(in8),
    .select1(A),
    .select2(C),
    .select3(D),
    .out(Y)
  );

endmodule`timescale 1ns / 1ps
module decode12
(
  input logic in,
  output logic out1,
  output logic out2,
  input logic enable
  
);
    assign out1 = enable ? in : 0; 
    assign out2 = enable ? ~in : 0; 
endmodule
`timescale 1ns / 1ps
module mux21
(
  input logic in1,
  input logic in2,
  input logic select,
  output logic out
);
    assign out = select ? in2: in1;
endmodule
`timescale 1ns / 1ps
module mux41
 (
  input logic in1,
  input logic in2,
  input logic in3,
  input logic in4,
  input logic select1,
  input logic select2,
  output logic out
);
  logic select1, select2;
  logic in1, in2, in3,in4;
  logic  out1, out2;
  assign in1 = in1;
  assign in2 = in2;
  assign in3 = in3;
  assign in4 = in4;
  mux21 m21a (
    .in1(in1),
    .in2(in2),
    .select(select2),
    .out(out1)
  );
  mux21 m21b (
    .in1(in3),
    .in2(in4),
    .select(select2),
    .out(out2)
  );
  mux21 m21c (
    .in1(out1),
    .in2(out2),
    .select(select1),
    .out(out)
  );
endmodule

`timescale 1ns / 1ps
module and2 
(
  input logic x,
  input logic y,
  output logic z
);
  assign z = x & y;
endmodule
`timescale 1ns / 1ps
module or2
(
  input logic x,
  input logic y,
  output logic z
);
  assign z = x | y;
endmodule
`timescale 1ns / 1ps
module functest;
  logic A, B, C, D,enable;
  logic Y;

    assign enable = 1;
  func fun (
    .A(A),
    .B(B),
    .C(C),
    .D(D),
    .Y(Y),
    .enable(enable)
  );
    
  initial begin
    A = 0; B = 0; C = 0; D = 0; #30;
    A = 0; B = 0; C = 0; D = 1; #30;
    A = 0; B = 0; C = 1; D = 0; #30;
    A = 0; B = 0; C = 1; D = 1; #30;
    A = 0; B = 1; C = 0; D = 0; #30;
    A = 0; B = 1; C = 0; D = 1; #30;
    A = 0; B = 1; C = 1; D = 0; #30;
    A = 0; B = 1; C = 1; D = 1; #30;
    A = 1; B = 0; C = 0; D = 0; #30;
    A = 1; B = 0; C = 0; D = 1; #30;
    A = 1; B = 0; C = 1; D = 0; #30;
    A = 1; B = 0; C = 1; D = 1; #30;
    A = 1; B = 1; C = 0; D = 0; #30;
    A = 1; B = 1; C = 0; D = 1; #30;
    A = 1; B = 1; C = 1; D = 0; #30;
    A = 1; B = 1; C = 1; D = 1; #30;
  end

endmodule
`timescale 1ns / 1ps
module decode12test;
  logic [0:0] in;
  logic [1:0] out;
  reg clk;
  decode12 dc12
(
    .in(in),
    .out(out)
  );
  always #10ns clk = 1'b0;
  always #10ns clk = ~clk;
  initial begin
    #0ns in = 1'b0;
    #20ns in = 1'b1;
    #40ns $finish;
  end
endmodule
`timescale 1ns / 1ps
module decode24test;
  
  logic in1,in2;
  logic out1,out2,out3,out4;
  logic enable;
  decode24 dc24 
(
    .in1(in1),
    .in2(in2),
    .out1(out1),
    .out2(out2),
    .out3(out3),
    .out4(out4),
    .enable(enable)
  );
  
  initial begin
    in1 = 0; in2 = 0; enable = 1; #10;
    in1 = 0; in2 = 1; enable = 1; #10;
    in1 = 1; in2 = 0; enable = 1; #10;
    in1 = 1; in2 = 1; enable = 1; #10;
    in1 = 0; in2 = 0; enable = 0; #10;
    in1 = 0; in2 = 1; enable = 0; #10;
    in1 = 1; in2 = 0; enable = 0; #10;
    in1 = 1; in2 = 1; enable = 0; #10;
  end
endmodule
`timescale 1ns / 1ps
module mux21test;
  logic in1;
  logic in2;
  logic select;
  logic out;
  
  mux21 m21
(
    .in1(in1),
    .in2(in2),
    .select(select),
    .out(out)
  );
  
  initial begin
    select = 0; in1 = 0; in2 = 0;  #10;
    select = 0; in1 = 0; in2 = 1;  #10;
    select = 0; in1 = 1; in2 = 0;  #10;
    select = 0; in1 = 1; in2 = 1;  #10;
    select = 1; in1 = 0; in2 = 0;  #10;
    select = 1; in1 = 0; in2 = 1;  #10;
    select = 1; in1 = 1; in2 = 0;  #10;
    select = 1; in1 = 1; in2 = 1;  #10;
  end
endmodule
`timescale 1ns / 1ps
module mux41test;
  logic in1,in2,in3,in4;
  logic select1,select2;
  logic out;
  mux41 m41 
  (
    .in1(in1),
    .in2(in2),
    .in3(in3),
    .in4(in4),
    .select1(select1),
    .select2(select2),
    .out(out)
  );
  initial begin
    select1 = 0; select2 = 0; in1 = 1; in2 = 0; in3 = 0; in4 = 0; #10;
    select1 = 0; select2 = 1; in1 = 0; in2 = 1; in3 = 0; in4 = 0; #10;
    select1 = 1; select2 = 0; in1 = 0; in2 = 0; in3 = 1; in4 = 0; #10;
    select1 = 1; select2 = 1; in1 = 0; in2 = 0; in3 = 0; in4 = 1; #10;
  end
endmodule
`timescale 1ns / 1ps
module mux81test;
  logic in1,in2,in3,in4,in5,in6,in7,in8;
  logic select1, select2, select3;
  logic out;
  mux81 m81 
  (
    .in1(in1),
    .in2(in2),
    .in3(in3),
    .in4(in4),
    .in5(in5),
    .in6(in6),
    .in7(in7),
    .in8(in8),   
    .select1(select1),
    .select2(select2),
    .select3(select3),
    .out(out)
  );
    
  initial begin
    for(int i = 0; i < 2048; i = i + 1) 
       begin
        {in1,in2,in3,in4,in5,in6,in7,in8,select1,select2,select3} = i;
        #10;
    end    
  end

endmodule
